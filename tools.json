[
  {
    "name": "read_file",
    "description": "[BASIC] Read entire file contents (memory intensive for >50KB files). For large files or specific sections, use get_file_section to save 70-90% tokens. Automatically detects file encoding.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to read"
        }
      },
      "required": ["path"],
      "additionalProperties": false
    }
  },
  {
    "name": "write_file",
    "description": "[BASIC] Write content to file, creating parent directories automatically. Always writes in UTF-8 encoding. For adding content to existing files, use append_to_file. For complex edits, use patch_apply calls.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to write"
        },
        "content": {
          "type": "string",
          "description": "Content to write"
        }
      },
      "required": ["path", "content"],
      "additionalProperties": false
    }
  },
  {
    "name": "list_directory",
    "description": "[BASIC] List directory contents with file sizes and types. For project overviews, use analyze_project. For file counts by extension, use count_files. Returns sorted list with size information.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Directory path to list"
        }
      },
      "required": ["path"],
      "additionalProperties": false
    }
  },
  {
    "name": "create_directory",
    "description": "[BASIC] Create single directory with automatic parent directory creation. For multiple directories at once, use create_directories for better efficiency.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Directory path to create"
        }
      },
      "required": ["path"],
      "additionalProperties": false
    }
  },
  {
    "name": "create_directories",
    "description": "[ADVANCED] Create multiple directories efficiently in batch operation with automatic parent creation. Ideal for complex project structures and initialization. Much faster than multiple create_directory calls.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "description": "List of directory paths to create",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["paths"],
      "additionalProperties": false
    }
  },
  {
    "name": "list_allowed_directories",
    "description": "[ADVANCED] List all accessible directories on the server. Essential for understanding server permissions and available paths. Use before attempting operations in new locations.",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": [],
      "additionalProperties": false
    }
  },
  {
    "name": "file_exists",
    "description": "[EXPERT] Ultra-fast existence check for files/directories (returns Yes/No only). Extremely token-efficient. Much faster than attempting read operations. Use for validation before operations.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Path to check"
        }
      },
      "required": ["path"],
      "additionalProperties": false
    }
  },
  {
    "name": "files_exist",
    "description": "[EXPERT] Batch existence check for multiple files/directories (returns Yes/No/Error array). Up to 90% more efficient than multiple file_exists calls. Ideal for validating file lists.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "description": "List of file/directory paths to check",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["paths"],
      "additionalProperties": false
    }
  },
  {
    "name": "count_files",
    "description": "[ADVANCED] Count files by extension with optional filtering. Returns statistics without loading file contents - highly token-efficient. Better than manual counting via list_directory.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Directory path"
        },
        "extension": {
          "type": "string",
          "description": "File extension to filter (optional, e.g., '.py', '.js')"
        }
      },
      "required": ["path"],
      "additionalProperties": false
    }
  },
  {
    "name": "get_directory_size",
    "description": "[ADVANCED] Calculate total directory size with readable format (bytes/KB/MB). Compact summary without listing files. Much more efficient than manual calculation.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Directory path"
        }
      },
      "required": ["path"],
      "additionalProperties": false
    }
  },
  {
    "name": "get_recent_files",
    "description": "[ADVANCED] Get most recently modified files with timestamps. Perfect for finding latest changes efficiently. Returns sorted list by modification time - ideal for development workflows.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Directory path"
        },
        "limit": {
          "type": "integer",
          "description": "Max files to return (default: 5)",
          "default": 5
        }
      },
      "required": ["path"],
      "additionalProperties": false
    }
  },
  {
    "name": "analyze_project",
    "description": "[EXPERT] Comprehensive project analysis: file types, structure, and statistics. Best for understanding large projects quickly. Returns compact overview with file counts by extension and directory structure.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Project directory path"
        }
      },
      "required": ["path"],
      "additionalProperties": false
    }
  },
  {
    "name": "git_status",
    "description": "[ADVANCED] Get detailed Git repository status using GitPython. Shows modified, staged, untracked files with comprehensive analysis. More detailed than command-line git status.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "repo_path": {
          "type": "string",
          "description": "Git repository path (default: current directory)"
        }
      },
      "required": [],
      "additionalProperties": false
    }
  },
  {
    "name": "git_add",
    "description": "[ADVANCED] Add files to Git staging area using GitPython. Accepts multiple files and patterns. Prepares files for the next commit with detailed feedback on staged changes.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "repo_path": {
          "type": "string",
          "description": "Git repository path (default: current directory)"
        },
        "files": {
          "type": "array",
          "description": "List of file paths to add (supports patterns like '*.py')",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["files"],
      "additionalProperties": false
    }
  },
  {
    "name": "git_commit",
    "description": "[ADVANCED] Commit staged changes to Git repository with GitPython. Creates new commit with detailed message and returns commit hash. Validates staged changes before committing.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "repo_path": {
          "type": "string",
          "description": "Git repository path (default: current directory)"
        },
        "message": {
          "type": "string",
          "description": "Commit message"
        }
      },
      "required": ["message"],
      "additionalProperties": false
    }
  },
  {
    "name": "git_push",
    "description": "[ADVANCED] Push local commits to remote repository using GitPython. Uploads commits to remote server with progress tracking and error handling. Supports custom remote and branch.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "repo_path": {
          "type": "string",
          "description": "Git repository path (default: current directory)"
        },
        "remote": {
          "type": "string",
          "description": "Remote repository name (default: origin)"
        },
        "branch": {
          "type": "string",
          "description": "Branch to push (default: current branch)"
        }
      },
      "required": [],
      "additionalProperties": false
    }
  },
  {
    "name": "git_pull",
    "description": "[ADVANCED] Pull and merge changes from remote repository using GitPython. Downloads and integrates remote changes with conflict detection and merge status reporting.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "repo_path": {
          "type": "string",
          "description": "Git repository path (default: current directory)"
        },
        "remote": {
          "type": "string",
          "description": "Remote repository name (default: origin)"
        },
        "branch": {
          "type": "string",
          "description": "Branch to pull (default: current branch)"
        }
      },
      "required": [],
      "additionalProperties": false
    }
  },
  {
    "name": "git_clone",
    "description": "[ADVANCED] Clone remote Git repository to local directory using GitPython. Downloads entire repository from remote URL with progress tracking and error handling.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "Git repository URL to clone (HTTPS or SSH)"
        },
        "path": {
          "type": "string",
          "description": "Local path to clone to (optional, uses repo name if not specified)"
        }
      },
      "required": ["url"],
      "additionalProperties": false
    }
  },
  {
    "name": "git_branch",
    "description": "[ADVANCED] Complete Git branch management using GitPython: list, create, checkout, delete branches. Shows current branch, tracking info, and detailed branch status.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "repo_path": {
          "type": "string",
          "description": "Git repository path (default: current directory)"
        },
        "action": {
          "type": "string",
          "description": "Action to perform: list (default), create, checkout, delete",
          "enum": ["list", "create", "checkout", "delete"],
          "default": "list"
        },
        "branch_name": {
          "type": "string",
          "description": "Branch name (required for create/checkout/delete operations)"
        },
        "base_branch": {
          "type": "string",
          "description": "Base branch for creation (optional, defaults to current branch)"
        }
      },
      "required": [],
      "additionalProperties": false
    }
  },
  {
    "name": "git_log",
    "description": "[ADVANCED] Show Git commit history using GitPython. Displays commit hash, author, date, and message in readable format. More detailed than command-line git log.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "repo_path": {
          "type": "string",
          "description": "Git repository path (default: current directory)"
        },
        "max_count": {
          "type": "integer",
          "description": "Maximum number of commits to show (default: 10)",
          "default": 10
        }
      },
      "required": [],
      "additionalProperties": false
    }
  },
  {
    "name": "git_init",
    "description": "[ADVANCED] Initialize new Git repository using GitPython. Creates .git directory and initial repository structure with confirmation of successful initialization.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "repo_path": {
          "type": "string",
          "description": "Directory path to initialize as Git repository"
        }
      },
      "required": ["repo_path"],
      "additionalProperties": false
    }
  },
  {
    "name": "copy_file",
    "description": "[ADVANCED] Copy file with metadata preservation using OS commands. Much faster and more token-efficient than read+write combination. Preserves timestamps and permissions.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "description": "Source file path"
        },
        "destination": {
          "type": "string",
          "description": "Destination file path"
        }
      },
      "required": ["source", "destination"],
      "additionalProperties": false
    }
  },
  {
    "name": "move_file",
    "description": "[ADVANCED] Move or rename file using OS commands. Single atomic operation for move+rename tasks. More efficient than copy+delete combination.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "description": "Source file path"
        },
        "destination": {
          "type": "string",
          "description": "Destination file path"
        }
      },
      "required": ["source", "destination"],
      "additionalProperties": false
    }
  },
  {
    "name": "delete_file",
    "description": "[ADVANCED] Delete file or directory with safety confirmation. Use backup_file first for safety. Requires force=true for actual deletion, provides preview by default.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File or directory path to delete"
        },
        "force": {
          "type": "boolean",
          "description": "Skip confirmation and delete immediately",
          "default": false
        }
      },
      "required": ["path"],
      "additionalProperties": false
    }
  },
  {
    "name": "backup_file",
    "description": "[EXPERT] Create timestamped backup copy (format: filename.backup_YYYYMMDD_HHMMSS). Essential before risky operations. Extremely token-efficient with size reporting.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to backup"
        }
      },
      "required": ["path"],
      "additionalProperties": false
    }
  },
  {
    "name": "file_info",
    "description": "[EXPERT] Get file metadata without reading contents (size, dates, permissions). Extremely token-efficient for checking file properties. Perfect for validation and analysis.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to examine"
        }
      },
      "required": ["path"],
      "additionalProperties": false
    }
  },
  {
    "name": "append_to_file",
    "description": "[ADVANCED] Append content to file end with line count tracking. Shows total line changes and tracks file growth. More efficient than read+modify+write for adding content.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to modify"
        },
        "content": {
          "type": "string",
          "description": "Content to append (newline added automatically)"
        }
      },
      "required": ["path", "content"],
      "additionalProperties": false
    }
  },
  {
    "name": "get_file_section",
    "description": "[EXPERT] Read specific lines from large files with context. Saves 70-90% tokens vs read_file for large files. Shows line numbers and highlights target range. Memory-efficient streaming for huge files.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to read"
        },
        "start_line": {
          "type": "integer",
          "description": "Start line number (1-based)"
        },
        "end_line": {
          "type": "integer",
          "description": "End line number (1-based, optional, defaults to start_line)"
        },
        "context": {
          "type": "integer",
          "description": "Extra context lines around target range (default: 0)",
          "default": 0
        }
      },
      "required": ["path", "start_line"],
      "additionalProperties": false
    }
  },
  {
    "name": "count_occurrences",
    "description": "[ADVANCED] Count text occurrences in file with case-sensitivity options. Reports total matches, matching lines, and file statistics. More efficient than manual search through file content.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to search"
        },
        "search_text": {
          "type": "string",
          "description": "Text to search for"
        },
        "case_sensitive": {
          "type": "boolean",
          "description": "Case sensitive search (default: true)",
          "default": true
        }
      },
      "required": ["path", "search_text"],
      "additionalProperties": false
    }
  },
  {
    "name": "replace_line_range",
    "description": "[ADVANCED] Replace specific line range with new content efficiently. Tracks line number changes: shows original vs new line counts, which lines shift up/down. Memory-efficient streaming for large files.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to modify"
        },
        "start_line": {
          "type": "integer",
          "description": "Start line number (1-based)"
        },
        "end_line": {
          "type": "integer",
          "description": "End line number (1-based, inclusive)"
        },
        "content": {
          "type": "string",
          "description": "New content to replace with (supports multiline)"
        }
      },
      "required": ["path", "start_line", "end_line", "content"],
      "additionalProperties": false
    }
  },
  {
    "name": "delete_lines",
    "description": "[ADVANCED] Delete specific line range efficiently with line tracking. Reports which lines were deleted and how remaining lines shift up. Memory-efficient streaming for large files.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to modify"
        },
        "start_line": {
          "type": "integer",
          "description": "Start line number (1-based)"
        },
        "end_line": {
          "type": "integer",
          "description": "End line number (1-based, optional, defaults to start_line)"
        }
      },
      "required": ["path", "start_line"],
      "additionalProperties": false
    }
  },
  {
    "name": "regex_replace",
    "description": "[EXPERT] Advanced pattern-based replacement with regex support. Supports flags (i=ignorecase, m=multiline, s=dotall), capture groups ($1, $2), and replacement limits. Much more powerful than basic find_and_replace.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to modify"
        },
        "pattern": {
          "type": "string",
          "description": "Regular expression pattern"
        },
        "replacement": {
          "type": "string",
          "description": "Replacement text (supports capture groups: $1, $2, etc.)"
        },
        "flags": {
          "type": "string",
          "description": "Regex flags: i=ignorecase, m=multiline, s=dotall (default: none)",
          "default": ""
        },
        "count": {
          "type": "integer",
          "description": "Maximum replacements to make (0 = unlimited, default: 0)",
          "default": 0
        }
      },
      "required": ["path", "pattern", "replacement"],
      "additionalProperties": false
    }
  },
  {
    "name": "insert_at_position",
    "description": "[ADVANCED] Insert content at specific byte position in file. Useful for binary files or precise positioning. Use with caution on text files - line-based operations are usually better.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to modify"
        },
        "position": {
          "type": "integer",
          "description": "Byte position to insert at (0-based)"
        },
        "content": {
          "type": "string",
          "description": "Content to insert"
        }
      },
      "required": ["path", "position", "content"],
      "additionalProperties": false
    }
  },
  {
    "name": "smart_indent",
    "description": "[EXPERT] Automatic indentation adjustment for code blocks. Adds or removes indent levels efficiently. Supports tabs/spaces conversion. Perfect for code refactoring and formatting.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to modify"
        },
        "start_line": {
          "type": "integer",
          "description": "Start line number (1-based)"
        },
        "end_line": {
          "type": "integer",
          "description": "End line number (1-based)"
        },
        "indent_change": {
          "type": "integer",
          "description": "Indent levels to add (positive) or remove (negative)"
        },
        "use_tabs": {
          "type": "boolean",
          "description": "Use tabs instead of spaces (default: false)",
          "default": false
        }
      },
      "required": ["path", "start_line", "end_line", "indent_change"],
      "additionalProperties": false
    }
  },
  {
    "name": "patch_apply",
    "description": "[EXPERT] Apply single precise edit operation safely. Prevents line number conflicts by processing one operation at a time. Supports multiline content with detailed operation tracking. For multiple edits, use separate calls to maintain line number accuracy.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to modify"
        },
        "operations": {
          "type": "array",
          "description": "Single operation array (multiple operations no longer supported for safety). Use separate calls for multiple edits.",
          "maxItems": 1,
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["replace", "insert", "delete"],
                "description": "Operation type: replace (substitute lines), insert (add new lines), delete (remove lines)"
              },
              "start": {
                "type": "integer",
                "description": "Start line number (1-based). For insert: position to insert at"
              },
              "end": {
                "type": "integer",
                "description": "End line number (1-based, inclusive). Optional for replace/delete operations (defaults to start line). For replace: last line to replace. For delete: last line to remove"
              },
              "content": {
                "type": "string",
                "description": "Content for replace/insert operations. Supports multiline content with \\n separators. Each line will be processed separately."
              }
            },
            "required": ["type", "start"]
          }
        }
      },
      "required": ["path", "operations"],
      "additionalProperties": false
    }
  },
  {
    "name": "search_in_file",
    "description": "[ADVANCED] Search for text within single file with context and highlighting. Windows findstr-like functionality with line numbers, regex support, and case options. Shows surrounding context lines.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to search in"
        },
        "search_text": {
          "type": "string",
          "description": "Text or pattern to search for"
        },
        "case_sensitive": {
          "type": "boolean",
          "description": "Whether to match case (default: true)",
          "default": true
        },
        "context_lines": {
          "type": "integer",
          "description": "Number of context lines to show around matches (default: 0)",
          "default": 0
        },
        "use_regex": {
          "type": "boolean",
          "description": "Whether to use regular expression search (default: false)",
          "default": false
        },
        "show_matches": {
          "type": "boolean",
          "description": "Whether to highlight matches in output (default: true)",
          "default": true
        }
      },
      "required": ["path", "search_text"],
      "additionalProperties": false
    }
  },
  {
    "name": "search_in_directory",
    "description": "[ADVANCED] Search for text across multiple files in directory with extension filtering. Supports regex patterns and performance limits. Perfect for project-wide searches with detailed match reporting.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "directory": {
          "type": "string",
          "description": "Directory path to search in"
        },
        "search_text": {
          "type": "string",
          "description": "Text or pattern to search for"
        },
        "file_extensions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "File extensions to search (e.g., ['.py', '.js']). If null, searches all files."
        },
        "case_sensitive": {
          "type": "boolean",
          "description": "Whether to match case (default: true)",
          "default": true
        },
        "context_lines": {
          "type": "integer",
          "description": "Number of context lines to show around matches (default: 0)",
          "default": 0
        },
        "use_regex": {
          "type": "boolean",
          "description": "Whether to use regular expression search (default: false)",
          "default": false
        },
        "max_files": {
          "type": "integer",
          "description": "Maximum number of files to search (default: 100)",
          "default": 100
        }
      },
      "required": ["directory", "search_text"],
      "additionalProperties": false
    }
  },
  {
    "name": "regex_search",
    "description": "[EXPERT] Advanced regex search with capture groups and detailed pattern matching. Returns capture groups, match positions, and full pattern details. Much more powerful than basic text search.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to search in"
        },
        "pattern": {
          "type": "string",
          "description": "Regular expression pattern"
        },
        "flags": {
          "type": "string",
          "description": "Regex flags: i=ignorecase, m=multiline, s=dotall (default: none)",
          "default": ""
        },
        "capture_groups": {
          "type": "boolean",
          "description": "Whether to capture and return regex groups (default: false)",
          "default": false
        }
      },
      "required": ["path", "pattern"],
      "additionalProperties": false
    }
  },
  {
    "name": "backup_files",
    "description": "[EXPERT] Create multiple backup copies with consistent timestamp for batch operations. All files get same timestamp for backup set consistency. Essential before risky batch changes - highly token-efficient.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "description": "List of file paths to backup",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["paths"],
      "additionalProperties": false
    }
  },
  {
    "name": "find_function",
    "description": "[EXPERT] Find specific function using tree-sitter parser. Supports: JavaScript, TypeScript, Python, Java, C/C++, C#, Rust, Go, CSS, HTML, JSON, JSX, and more. Returns precise line numbers and function signature.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to search in"
        },
        "function_name": {
          "type": "string", 
          "description": "Name of the function to find (exact match)"
        }
      },
      "required": ["path", "function_name"],
      "additionalProperties": false
    }
  },
  {
    "name": "list_functions",
    "description": "[EXPERT] List all functions in file using tree-sitter parser. Supports: JavaScript, TypeScript, Python, Java, C/C++, C#, Rust, Go, CSS, HTML, JSON, JSX. Shows function types, line numbers, and complexity metrics.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path to analyze"
        },
        "include_private": {
          "type": "boolean",
          "description": "Include private functions (starting with underscore)",
          "default": true
        }
      },
      "required": ["path"],
      "additionalProperties": false
    }
  },
  {
    "name": "extract_function",
    "description": "[EXPERT] Extract complete function code using tree-sitter parser. Includes preceding comments and documentation by default. Precise extraction with proper boundaries - perfect for code analysis and refactoring.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path containing the function"
        },
        "function_name": {
          "type": "string",
          "description": "Name of the function to extract"
        },
        "include_comments": {
          "type": "boolean",
          "description": "Include preceding comments and documentation",
          "default": true
        }
      },
      "required": ["path", "function_name"],
      "additionalProperties": false
    }
  },
  {
    "name": "get_function_info",
    "description": "[EXPERT] Get detailed function metadata using tree-sitter parser. Includes parameters, complexity score, signature, and code preview. Advanced code analysis for refactoring and documentation.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "File path containing the function"
        },
        "function_name": {
          "type": "string",
          "description": "Name of the function to analyze"
        }
      },
      "required": ["path", "function_name"],
      "additionalProperties": false
    }
  }
]